#! /usr/bin/env python3


#     This script reads a CSV file containind UUIDs and PathNames,
#  generated by check_photos_library and a directory containing the
#  photos missing.
#
#     With those, it copies back the photos to original location. The
#  photos on the directory must have the same name as original that's
#  missing on Photos Library.
#

import os
import shutil
import sys
from argparse import ArgumentParser

CRED = '\033[31m'
CGREEN = '\033[32m'
CORANGE = '\033[93m'
CEND = '\033[0m'

verbose = False
copied_dir = "Restored"


def vprint(message):
    if verbose:
        print(message)


def copyback(csv_path, photos_dir, library_dir):
    csv_path = os.path.abspath(csv_path)
    photos_dir = os.path.abspath(photos_dir)
    library_dir = os.path.abspath(library_dir)

    if not os.path.isfile(csv_path):  # test exsitance
        print(" ERROR: CSV File not found.")
        sys.exit(1)

    if not os.path.isdir(photos_dir):
        print(" ERROR: Photos directory not found or not DIR.")
        sys.exit(1)

    if not os.path.isdir(library_dir):
        print(" ERROR: Library directory not found or not DIR.")
        sys.exit(1)

    # Let's process the CSV File
    with open('%s' % csv_path, 'r') as csv:  # Open output File

        # create directory to copy files processed
        restored_full_path = os.path.join(photos_dir, copied_dir)
        os.makedirs(restored_full_path, exist_ok=True)

        num_restored = 0
        num_notfound = 0
        num_ignored = 0

        for linha in csv:
            linha = linha.rstrip("\n")
            missing_photo_csvpath = linha.split(",")[2]  # get the path of library from CSV

            missing_photo_target = os.path.join(library_dir, "Masters", missing_photo_csvpath)
            (missing_photo_libpath, missing_photo_filename) = os.path.split(
                missing_photo_target)  # path on library and filename
            missing_photo_source = os.path.join(photos_dir, missing_photo_filename)  # path where we will get the file

            if not os.path.isdir(missing_photo_libpath):
                vprint(
                    CORANGE + "WARNING: " + CEND + " Path on Library missing for file. Strange...\n\t" + missing_photo_libpath)
                num_ignored += 1
            else:
                if os.path.isfile(missing_photo_source):  # check if the source exists in photos_dir
                    shutil.copyfile(missing_photo_source, missing_photo_target)
                    shutil.move(missing_photo_source, restored_full_path)
                    vprint(CGREEN + "COPIED: " + CEND + missing_photo_source)
                    num_restored += 1
                else:
                    vprint(CRED + "NOT FOUND: " + CEND + missing_photo_source)
                    num_notfound += 1

        vprint("--------")
        vprint(str(num_restored + num_notfound + num_ignored) + " Total files.")
        vprint(str(num_restored) + " files restored.")
        vprint(str(num_notfound) + " files not found.")
        vprint(str(num_ignored) + " files ignored.")


# Usage ./restore_from_directory.py <source_img_dir> <csv_file> <library_dir>
if __name__ == '__main__':
    # Options parsed from command line
    parser = ArgumentParser()
    parser.add_argument('-v', '--verbose', action="store_true", default=False, help='Print All Check Files on Screen')
    parser.add_argument('csv_file', help='The CSV file generated by check_photos_library')
    parser.add_argument('photos_dir', help='The directory where the photos files will be taken.')
    parser.add_argument('library_dir', help='Path of Photos App Library')
    args = parser.parse_args()

    verbose = args.verbose

    print("Checking Library: ", args.library_dir)
    copyback(args.csv_file, args.photos_dir, args.library_dir)
