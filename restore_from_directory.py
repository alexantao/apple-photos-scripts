#! /usr/bin/env python3


#     This script reads a CSV file containind UUIDs and PathNames,
#  generated by check_photos_library and a directory containing the
#  photos missing.
#
#     With those, it copies back the photos to original location. The
#  photos on the directory must have the same name as original that's
#  missing on Photos Library.
#

import pathlib
import shutil
import sys
from argparse import ArgumentParser

CRED = '\033[31m'
CGREEN = '\033[32m'
CORANGE = '\033[93m'
CEND = '\033[0m'

verbose = False
copied_dir = "Restored"


def vprint(message):
    if verbose:
        print(message)


def copyback(csv_path, photos_dir, library_dir):
    csv_path = pathlib.Path(csv_path).resolve()
    photos_dir = pathlib.Path(photos_dir).resolve()
    library_dir = pathlib.Path(library_dir).resolve()

    if not csv_path.is_file():  # test exsitance
        print(" ERROR: CSV File not found.")
        sys.exit(1)

    if not photos_dir.is_dir():
        print(" ERROR: Photos directory not found or not DIR.")
        sys.exit(1)

    if not library_dir.is_dir():
        print(" ERROR: Library directory not found or not DIR.")
        sys.exit(1)

    # Let's process the CSV File
    with csv_path.open(mode='r') as csv:

        # create directory to copy files processed
        restored_full_path = photos_dir / copied_dir
        restored_full_path.mkdir(parents=True, exist_ok=True)


        num_restored = 0
        num_notfound = 0
        num_ignored = 0

        for linha in csv:
            linha = linha.rstrip("\n")
            missing_photo_csvpath = pathlib.Path(linha.split(",")[2])  # get the path of library from CSV

            missing_photo_target = library_dir / "Masters" / missing_photo_csvpath
            missing_photo_libpath = missing_photo_target.parent
            missing_photo_filename = missing_photo_target.name

            missing_photo_source = photos_dir / missing_photo_filename

            # if not os.path.isdir(missing_photo_libpath):
            if not missing_photo_libpath.is_dir():
                vprint("{0}WARNING: {1} Path on Library missing for file. Strange...\n\t{2}".format(CORANGE, CEND,
                                                                                                    missing_photo_libpath))
                num_ignored += 1
            else:
                if missing_photo_source.is_file():  # check if the source exists in photos_dir
                    shutil.copyfile(missing_photo_source, missing_photo_target)
                    shutil.move(missing_photo_source, restored_full_path)
                    vprint("{0}COPIED:{1} {2]".format(CGREEN, CEND, missing_photo_source))
                    num_restored += 1
                else:
                    vprint("{0}NOT FOUND:{1} {2}".format(CRED, CEND, missing_photo_source))
                    num_notfound += 1

        vprint("--------")
        vprint(str(num_restored + num_notfound + num_ignored) + " Total files.")
        vprint(str(num_restored) + " files restored.")
        vprint(str(num_notfound) + " files not found.")
        vprint(str(num_ignored) + " files ignored.")


# Usage ./restore_from_directory.py  <csv_file> <source_img_dir> <library_dir>
if __name__ == '__main__':
    # Options parsed from command line
    parser = ArgumentParser()
    parser.add_argument('-v', '--verbose', action="store_true", default=False, help='Print All Check Files on Screen')
    parser.add_argument('csv_file', help='The CSV file generated by check_photos_library')
    parser.add_argument('photos_dir', help='The directory where the photos files will be taken.')
    parser.add_argument('library_dir', help='Path of Photos App Library')
    args = parser.parse_args()

    verbose = args.verbose

    print("Checking Library: ", args.library_dir)
    copyback(args.csv_file, args.photos_dir, args.library_dir)
